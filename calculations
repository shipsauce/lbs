# -*- coding: UTF-8 -*-
import numpy as np

#channel weights
w_c=np.array([4/9,1/9,1/9,1/9,1/9,1/36,1/36,1/36,1/36])

#channel velocities
c_ca=np.array([[0,1,0,-1,0,1,-1,-1,1],
       [0,0,1,0,-1,1,1,-1,-1]]).T

#channel velocities split on x and y for easier iteration     
cxs=np.array([0,1,0,-1,0,1,-1,-1,1])
cys=np.array([0,0,1,0,-1,1,1,-1,-1])

def density_calc(f):
    '''Calculates the density in every gridpoint by summation over the 0th axis.
        Parameters: the probability density function
        Returns:  a matrix with calculated densities '''
    rho=np.sum(f,0)
    return rho

def velocity_calc(f):
    '''Calculates the average velocity in x- and y-direction in every gridpoint.
        Parameters: the probability density function
        Returns: three-dimensional matrix with average x- and y-velocities for all gridpoints'''
    rho=density_calc(f)
    x=rho.shape[0]
    y=rho.shape[1]
    ux_ij=((f[1]+f[5]+f[8]-(f[3]+f[6]+f[7])))/rho
    uy_ij=((f[2]+f[5]+f[6]-(f[4]+f[7]+f[8])))/rho
    u_aij=np.zeros((2,x,y))
    u_aij[0]=ux_ij
    u_aij[1]=uy_ij
    return u_aij

def calc_f_equilibrium(rho,u):
    '''Calculates the equilibrium probability density.
        Parameters:
                    rho: the density matrix 
                    u:   the average velocity matrix
        Returns:
                    f_eq: the equilibrium probability density as a 3d-matrix'''
                    
    sizex=np.shape(rho)[0]
    sizey=np.shape(rho)[1]
    f_eq=np.zeros((9,sizex,sizey))    
    for i in range(9):
        f_eq[i] = w_c[i] * rho * (1 + 3 * (cxs[i]*u[0] + cys[i]*u[1]) + (9/2)*np.square(cxs[i]*u[0] + cys[i]*u[1]) - (3/2)*(u[0]**2+ u[1]**2))
    
    return f_eq
